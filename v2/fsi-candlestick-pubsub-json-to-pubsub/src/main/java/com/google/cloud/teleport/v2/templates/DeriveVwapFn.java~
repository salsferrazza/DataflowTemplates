/*
 * Copyright (C) 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

/**
 * DoFn that will determine if events are to be filtered. If filtering is
 * enabled, it will only publish events that pass the filter else, it will
 * publish all input events.
 */
@AutoValue
public abstract static class DeriveVwapFn extends DoFn<PubsubMessage, PubsubMessage> {

    private static final Logger LOG = LoggerFactory.getLogger(DeriveVwapFn.class);

    // Counter tracking the number of incoming Pub/Sub messages.
    private static final Counter INPUT_COUNTER = Metrics.counter(DeriveVwapFn.class, "inbound-messages");

    // Counter tracking the number of output Pub/Sub messages after the user
    // provided filter
    // is applied.
    private static final Counter OUTPUT_COUNTER = Metrics.counter(DeriveVwapFn.class, "outbound-messages");

    // Pipeline options
    public abstract Options getOptions();

    public static Builder newBuilder() {
	return new AutoValue_VwapPublisher_DeriveVwapFn.Builder();
    }

    @Setup
    public void setup() {
    }

    @ProcessElement
    public void processElement(ProcessContext context) {

	INPUT_COUNTER.inc();
	PubsubMessage message = context.element();
	writeOutput(context, message);

    }

    /**
     * Write a {@link PubsubMessage} and increment the output counter.
     * 
     * @param context {@link ProcessContext} to write {@link PubsubMessage} to.
     * @param message {@link PubsubMessage} output.
     */
    private void writeOutput(ProcessContext context, PubsubMessage message) {
	OUTPUT_COUNTER.inc();
	context.output(message);
    }

    /** Builder class for {@link DeriveVWapFn}. */
    @AutoValue.Builder
        abstract static class Builder {
	abstract DeriveVwapFn build();

	abstract Builder setOptions(Options options);
    }
}
